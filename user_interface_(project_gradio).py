# -*- coding: utf-8 -*-
"""User Interface (project_gradio)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ap2aEhGEhjB9SrRnpAuMqxyCPM2gKEyU
"""

!pip install gradio

import tf_keras
from tf_keras.models import load_model
model = tf_keras.models.load_model('/content/drive/MyDrive/BE_MAJOR/Trained_model1.h5')
model

pip install --upgrade gradio

import gradio as gr
import cv2

pip install gradio tensorflow numpy pillow

from google.colab import drive
drive.mount('/content/drive')

import gradio as gr
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load the pre-trained ResNet50 model
model = ResNet50(weights='imagenet', include_top=True, input_shape=(224, 224, 3))

# Define a function to preprocess the image
def preprocess(img):
    if img is None:
        raise ValueError("Input image is empty.")
    img_copy = img.copy()  # Create a copy of the image array
    img_resized = image.array_to_img(img_copy).resize((224, 224))  # Resize the copied image to (224, 224)
    img = image.img_to_array(img_resized)
    img = np.expand_dims(img, axis=0)
    img = preprocess_input(img)
    return img

# Define a function to extract intensity from model predictions
def get_intensity(preds):
    # Take the highest probability among all classes as intensity
    return np.max(preds)

# Define a function to map intensity to cyclone class
def map_intensity_to_class(intensity):
    if intensity > 0.8:
        return "Tropical Cyclone"
    elif intensity > 0.6:
        return "Typhoon"
    elif intensity > 0.4:
        return "Storm"
    else:
        return "Bubble"  # Default class if intensity is low

# Define a function to predict the class and intensity of the image
def predict_cyclone(img):
    try:
        img = preprocess(img)
        preds = model.predict(img)
        # Decode the prediction
        decoded_preds = decode_predictions(preds, top=1)[0][0]
        # Get the label, confidence, and intensity
        label = decoded_preds[1]
        confidence = decoded_preds[2]
        intensity = get_intensity(preds)
        predicted_class = map_intensity_to_class(intensity)
        return f"Prediction: {predicted_class}, Confidence: {confidence:.4f}, Intensity: {intensity:.4f}"
    except Exception as e:
        return str(e)

iface = gr.Interface(fn=predict_cyclone,
                     inputs="image",
                     outputs="text",
                     title="Cyclone Image Classifier",
                     description="Upload an image of a cyclone to predict."
                    )

iface.launch()

pip install -U gradio

import gradio as gr
import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions
from tensorflow.keras.preprocessing import image
import numpy as np

# Load the pre-trained ResNet50 model
model = ResNet50(weights='imagenet', include_top=True, input_shape=(224, 224, 3))

# Define a function to preprocess the image
def preprocess(img):
    if img is None:
        raise ValueError("Input image is empty.")
    img_copy = img.copy()  # Create a copy of the image array
    img_resized = image.array_to_img(img_copy).resize((224, 224))  # Resize the copied image to (224, 224)
    img = image.img_to_array(img_resized)
    img = np.expand_dims(img, axis=0)
    img = preprocess_input(img)
    return img

# Define a function to extract intensity from model predictions
def get_intensity(preds):
    # Take the highest probability among all classes as intensity
    return np.max(preds)

# Define a function to map intensity to cyclone class
def map_intensity_to_class(intensity):
    if intensity > 0.8:
        return "Tropical Cyclone"
    elif intensity > 0.6:
        return "Typhoon"
    elif intensity > 0.4:
        return "Storm"
    else:
        return "Bubble"  # Default class if intensity is low

# Define a function to predict the class and intensity of the image
def predict_cyclone(img, longitude, latitude, region):
    try:
        img = preprocess(img)
        preds = model.predict(img)
        # Decode the prediction
        decoded_preds = decode_predictions(preds, top=1)[0][0]
        # Get the label, confidence, and intensity
        label = decoded_preds[1]
        confidence = decoded_preds[2]
        intensity = get_intensity(preds)
        predicted_class = map_intensity_to_class(intensity)
        return f"Prediction: {predicted_class}, Confidence: {confidence:.4f}, Intensity: {intensity:.4f}, Latitude: {latitude}, Longitude: {longitude}, Region: {region}"
    except Exception as e:
        return str(e)

# Create input components
image_input = gr.inputs.Image(type="file", label="Upload an image of a cyclone")
longitude_input = gr.inputs.Textbox(label="Longitude")
latitude_input = gr.inputs.Textbox(label="Latitude")
region_input = gr.inputs.Textbox(label="Region")

# Create Gradio interface
iface = gr.Interface(
    fn=predict_cyclone,
    inputs=[image_input, longitude_input, latitude_input, region_input],
    outputs="text",
    title="Cyclone Image Classifier",
    description="Upload an image of a cyclone and provide longitude, latitude, and region."
)

# Launch the interface
iface.launch()

